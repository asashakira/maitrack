// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
insert into users (
    user_id,
    sega_id,
    password,
    game_name,
    tag_line,
    updated_at,
    created_at
)
values ($1, $2, $3, $4, $5, now(), now())
returning user_id, sega_id, password, game_name, tag_line, updated_at, created_at
`

type CreateUserParams struct {
	UserID   uuid.UUID
	SegaID   string
	Password string
	GameName string
	TagLine  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserID,
		arg.SegaID,
		arg.Password,
		arg.GameName,
		arg.TagLine,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.SegaID,
		&i.Password,
		&i.GameName,
		&i.TagLine,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
select
    user_id,
    sega_id,
    password,
    game_name,
    tag_line,
    updated_at,
    created_at
from users
order by updated_at desc
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.SegaID,
			&i.Password,
			&i.GameName,
			&i.TagLine,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
select
    user_id,
    sega_id,
    password,
    game_name,
    tag_line,
    updated_at,
    created_at
from users
where user_id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, userID uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.SegaID,
		&i.Password,
		&i.GameName,
		&i.TagLine,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByMaiID = `-- name: GetUserByMaiID :one
select
    user_id,
    sega_id,
    password,
    game_name,
    tag_line,
    updated_at,
    created_at
from users
where game_name = $1 and tag_line = $2
`

type GetUserByMaiIDParams struct {
	GameName string
	TagLine  string
}

func (q *Queries) GetUserByMaiID(ctx context.Context, arg GetUserByMaiIDParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByMaiID, arg.GameName, arg.TagLine)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.SegaID,
		&i.Password,
		&i.GameName,
		&i.TagLine,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserBySegaID = `-- name: GetUserBySegaID :one
select
    user_id,
    sega_id,
    password,
    game_name,
    tag_line,
    updated_at,
    created_at
from users
where sega_id = $1 and password = $2
`

type GetUserBySegaIDParams struct {
	SegaID   string
	Password string
}

func (q *Queries) GetUserBySegaID(ctx context.Context, arg GetUserBySegaIDParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserBySegaID, arg.SegaID, arg.Password)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.SegaID,
		&i.Password,
		&i.GameName,
		&i.TagLine,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
update users
set
    sega_id = $2,
    password = $3,
    game_name = $4,
    tag_line = $5,
    updated_at = now()
where user_id = $1
returning user_id, sega_id, password, game_name, tag_line, updated_at, created_at
`

type UpdateUserParams struct {
	UserID   uuid.UUID
	SegaID   string
	Password string
	GameName string
	TagLine  string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.UserID,
		arg.SegaID,
		arg.Password,
		arg.GameName,
		arg.TagLine,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.SegaID,
		&i.Password,
		&i.GameName,
		&i.TagLine,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

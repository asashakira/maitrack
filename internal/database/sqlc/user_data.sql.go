// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_data.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createUserData = `-- name: CreateUserData :one
insert into user_data (
    id,
    user_uuid,
    rating,
    season_play_count,
    total_play_count
)
values ($1, $2, $3, $4, $5)
returning id, user_uuid, rating, season_play_count, total_play_count, created_at
`

type CreateUserDataParams struct {
	ID              uuid.UUID `json:"id"`
	UserUuid        uuid.UUID `json:"userUuid"`
	Rating          int32     `json:"rating"`
	SeasonPlayCount int32     `json:"seasonPlayCount"`
	TotalPlayCount  int32     `json:"totalPlayCount"`
}

func (q *Queries) CreateUserData(ctx context.Context, arg CreateUserDataParams) (UserDatum, error) {
	row := q.db.QueryRow(ctx, createUserData,
		arg.ID,
		arg.UserUuid,
		arg.Rating,
		arg.SeasonPlayCount,
		arg.TotalPlayCount,
	)
	var i UserDatum
	err := row.Scan(
		&i.ID,
		&i.UserUuid,
		&i.Rating,
		&i.SeasonPlayCount,
		&i.TotalPlayCount,
		&i.CreatedAt,
	)
	return i, err
}

const getUserDataByUserUUID = `-- name: GetUserDataByUserUUID :one
select
    id,
    user_uuid,
    rating,
    season_play_count,
    total_play_count,
    created_at
from user_data
where user_uuid = $1
order by created_at desc
limit 1
`

func (q *Queries) GetUserDataByUserUUID(ctx context.Context, userUuid uuid.UUID) (UserDatum, error) {
	row := q.db.QueryRow(ctx, getUserDataByUserUUID, userUuid)
	var i UserDatum
	err := row.Scan(
		&i.ID,
		&i.UserUuid,
		&i.Rating,
		&i.SeasonPlayCount,
		&i.TotalPlayCount,
		&i.CreatedAt,
	)
	return i, err
}

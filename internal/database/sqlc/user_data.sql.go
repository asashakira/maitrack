// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_data.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createUserData = `-- name: CreateUserData :one
insert into user_data (
    id,
    user_id,
    game_name,
    tag_line,
    rating,
    season_play_count,
    total_play_count,
    created_at
)
values ($1, $2, $3, $4, $5, $6, $7, now())
returning
    id,
    user_id,
    game_name,
    tag_line,
    rating,
    season_play_count,
    total_play_count,
    created_at
`

type CreateUserDataParams struct {
	ID              uuid.UUID `json:"id"`
	UserID          uuid.UUID `json:"userID"`
	GameName        string    `json:"gameName"`
	TagLine         string    `json:"tagLine"`
	Rating          int32     `json:"rating"`
	SeasonPlayCount int32     `json:"seasonPlayCount"`
	TotalPlayCount  int32     `json:"totalPlayCount"`
}

func (q *Queries) CreateUserData(ctx context.Context, arg CreateUserDataParams) (UserDatum, error) {
	row := q.db.QueryRow(ctx, createUserData,
		arg.ID,
		arg.UserID,
		arg.GameName,
		arg.TagLine,
		arg.Rating,
		arg.SeasonPlayCount,
		arg.TotalPlayCount,
	)
	var i UserDatum
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GameName,
		&i.TagLine,
		&i.Rating,
		&i.SeasonPlayCount,
		&i.TotalPlayCount,
		&i.CreatedAt,
	)
	return i, err
}

const getUserDataByMaiID = `-- name: GetUserDataByMaiID :one
select
    id,
    user_id,
    game_name,
    tag_line,
    rating,
    season_play_count,
    total_play_count,
    created_at
from user_data
where game_name = $1 and tag_line = $2
order by created_at desc
limit 1
`

type GetUserDataByMaiIDParams struct {
	GameName string `json:"gameName"`
	TagLine  string `json:"tagLine"`
}

func (q *Queries) GetUserDataByMaiID(ctx context.Context, arg GetUserDataByMaiIDParams) (UserDatum, error) {
	row := q.db.QueryRow(ctx, getUserDataByMaiID, arg.GameName, arg.TagLine)
	var i UserDatum
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GameName,
		&i.TagLine,
		&i.Rating,
		&i.SeasonPlayCount,
		&i.TotalPlayCount,
		&i.CreatedAt,
	)
	return i, err
}

const getUserDataByUserID = `-- name: GetUserDataByUserID :one
select
    id,
    user_id,
    game_name,
    tag_line,
    rating,
    season_play_count,
    total_play_count,
    created_at
from user_data
where user_id = $1
order by created_at desc
limit 1
`

func (q *Queries) GetUserDataByUserID(ctx context.Context, userID uuid.UUID) (UserDatum, error) {
	row := q.db.QueryRow(ctx, getUserDataByUserID, userID)
	var i UserDatum
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GameName,
		&i.TagLine,
		&i.Rating,
		&i.SeasonPlayCount,
		&i.TotalPlayCount,
		&i.CreatedAt,
	)
	return i, err
}

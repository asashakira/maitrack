// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_metadata.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUserMetadata = `-- name: CreateUserMetadata :one
insert into user_metadata (
    user_uuid,
    bio,
    profile_image_url,
    location,
    twitter_id
)
values ($1, $2, $3, $4, $5)
returning user_uuid, bio, profile_image_url, location, twitter_id, updated_at, created_at
`

type CreateUserMetadataParams struct {
	UserUuid        uuid.UUID   `json:"userUuid"`
	Bio             pgtype.Text `json:"bio"`
	ProfileImageUrl pgtype.Text `json:"profileImageUrl"`
	Location        pgtype.Text `json:"location"`
	TwitterID       pgtype.Text `json:"twitterID"`
}

func (q *Queries) CreateUserMetadata(ctx context.Context, arg CreateUserMetadataParams) (UserMetadatum, error) {
	row := q.db.QueryRow(ctx, createUserMetadata,
		arg.UserUuid,
		arg.Bio,
		arg.ProfileImageUrl,
		arg.Location,
		arg.TwitterID,
	)
	var i UserMetadatum
	err := row.Scan(
		&i.UserUuid,
		&i.Bio,
		&i.ProfileImageUrl,
		&i.Location,
		&i.TwitterID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserMetadataByUserID = `-- name: GetUserMetadataByUserID :one
select user_uuid, bio, profile_image_url, location, twitter_id, updated_at, created_at
from user_metadata
where user_uuid = $1
`

func (q *Queries) GetUserMetadataByUserID(ctx context.Context, userUuid uuid.UUID) (UserMetadatum, error) {
	row := q.db.QueryRow(ctx, getUserMetadataByUserID, userUuid)
	var i UserMetadatum
	err := row.Scan(
		&i.UserUuid,
		&i.Bio,
		&i.ProfileImageUrl,
		&i.Location,
		&i.TwitterID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserMetadata = `-- name: UpdateUserMetadata :one
update user_metadata
set
    bio = $2,
    profile_image_url = $3,
    location = $4,
    twitter_id = $5,
    updated_at = now()
where user_uuid = $1
returning user_uuid, bio, profile_image_url, location, twitter_id, updated_at, created_at
`

type UpdateUserMetadataParams struct {
	UserUuid        uuid.UUID   `json:"userUuid"`
	Bio             pgtype.Text `json:"bio"`
	ProfileImageUrl pgtype.Text `json:"profileImageUrl"`
	Location        pgtype.Text `json:"location"`
	TwitterID       pgtype.Text `json:"twitterID"`
}

func (q *Queries) UpdateUserMetadata(ctx context.Context, arg UpdateUserMetadataParams) (UserMetadatum, error) {
	row := q.db.QueryRow(ctx, updateUserMetadata,
		arg.UserUuid,
		arg.Bio,
		arg.ProfileImageUrl,
		arg.Location,
		arg.TwitterID,
	)
	var i UserMetadatum
	err := row.Scan(
		&i.UserUuid,
		&i.Bio,
		&i.ProfileImageUrl,
		&i.Location,
		&i.TwitterID,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

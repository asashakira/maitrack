// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Beatmap struct {
	BeatmapID     uuid.UUID        `json:"beatmapID"`
	SongID        uuid.UUID        `json:"songID"`
	Difficulty    string           `json:"difficulty"`
	Level         string           `json:"level"`
	InternalLevel pgtype.Numeric   `json:"internalLevel"`
	Type          string           `json:"type"`
	TotalNotes    int32            `json:"totalNotes"`
	Tap           int32            `json:"tap"`
	Hold          int32            `json:"hold"`
	Slide         int32            `json:"slide"`
	Touch         int32            `json:"touch"`
	Break         int32            `json:"break"`
	NoteDesigner  string           `json:"noteDesigner"`
	MaxDxScore    int32            `json:"maxDxScore"`
	UpdatedAt     pgtype.Timestamp `json:"updatedAt"`
	CreatedAt     pgtype.Timestamp `json:"createdAt"`
}

type Score struct {
	ScoreID       uuid.UUID        `json:"scoreID"`
	BeatmapID     uuid.UUID        `json:"beatmapID"`
	SongID        uuid.UUID        `json:"songID"`
	UserID        uuid.UUID        `json:"userID"`
	Accuracy      string           `json:"accuracy"`
	MaxCombo      int32            `json:"maxCombo"`
	DxScore       int32            `json:"dxScore"`
	TapCritical   int32            `json:"tapCritical"`
	TapPerfect    int32            `json:"tapPerfect"`
	TapGreat      int32            `json:"tapGreat"`
	TapGood       int32            `json:"tapGood"`
	TapMiss       int32            `json:"tapMiss"`
	HoldCritical  int32            `json:"holdCritical"`
	HoldPerfect   int32            `json:"holdPerfect"`
	HoldGreat     int32            `json:"holdGreat"`
	HoldGood      int32            `json:"holdGood"`
	HoldMiss      int32            `json:"holdMiss"`
	SlideCritical int32            `json:"slideCritical"`
	SlidePerfect  int32            `json:"slidePerfect"`
	SlideGreat    int32            `json:"slideGreat"`
	SlideGood     int32            `json:"slideGood"`
	SlideMiss     int32            `json:"slideMiss"`
	TouchCritical int32            `json:"touchCritical"`
	TouchPerfect  int32            `json:"touchPerfect"`
	TouchGreat    int32            `json:"touchGreat"`
	TouchGood     int32            `json:"touchGood"`
	TouchMiss     int32            `json:"touchMiss"`
	BreakCritical int32            `json:"breakCritical"`
	BreakPerfect  int32            `json:"breakPerfect"`
	BreakGreat    int32            `json:"breakGreat"`
	BreakGood     int32            `json:"breakGood"`
	BreakMiss     int32            `json:"breakMiss"`
	Fast          int32            `json:"fast"`
	Late          int32            `json:"late"`
	PlayedAt      pgtype.Timestamp `json:"playedAt"`
	CreatedAt     pgtype.Timestamp `json:"createdAt"`
}

type Song struct {
	SongID      uuid.UUID        `json:"songID"`
	AltKey      string           `json:"altKey"`
	Title       string           `json:"title"`
	Artist      string           `json:"artist"`
	Genre       string           `json:"genre"`
	Bpm         string           `json:"bpm"`
	ImageUrl    string           `json:"imageUrl"`
	Version     string           `json:"version"`
	IsUtage     bool             `json:"isUtage"`
	IsAvailable bool             `json:"isAvailable"`
	ReleaseDate pgtype.Date      `json:"releaseDate"`
	DeleteDate  pgtype.Date      `json:"deleteDate"`
	UpdatedAt   pgtype.Timestamp `json:"updatedAt"`
	CreatedAt   pgtype.Timestamp `json:"createdAt"`
}

type User struct {
	UserID       uuid.UUID        `json:"userID"`
	Username     string           `json:"username"`
	Password     string           `json:"password"`
	SegaID       string           `json:"segaID"`
	SegaPassword string           `json:"segaPassword"`
	GameName     string           `json:"gameName"`
	TagLine      string           `json:"tagLine"`
	UpdatedAt    pgtype.Timestamp `json:"updatedAt"`
	CreatedAt    pgtype.Timestamp `json:"createdAt"`
}

type UserDatum struct {
	ID              uuid.UUID        `json:"id"`
	UserID          uuid.UUID        `json:"userID"`
	GameName        string           `json:"gameName"`
	TagLine         string           `json:"tagLine"`
	Rating          int32            `json:"rating"`
	SeasonPlayCount int32            `json:"seasonPlayCount"`
	TotalPlayCount  int32            `json:"totalPlayCount"`
	CreatedAt       pgtype.Timestamp `json:"createdAt"`
}

type UserMetadatum struct {
	UserID       uuid.UUID        `json:"userID"`
	LastPlayedAt pgtype.Timestamp `json:"lastPlayedAt"`
	UpdatedAt    pgtype.Timestamp `json:"updatedAt"`
	CreatedAt    pgtype.Timestamp `json:"createdAt"`
}

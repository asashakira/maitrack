// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_scrape_metadata.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUserScrapeMetadata = `-- name: CreateUserScrapeMetadata :one
insert into user_scrape_metadata (
    user_id,
    last_played_at,
    updated_at,
    created_at
)
values ($1, $2, now(), now())
returning user_id, last_played_at, updated_at, created_at
`

type CreateUserScrapeMetadataParams struct {
	UserID       uuid.UUID
	LastPlayedAt pgtype.Timestamp
}

func (q *Queries) CreateUserScrapeMetadata(ctx context.Context, arg CreateUserScrapeMetadataParams) (UserScrapeMetadatum, error) {
	row := q.db.QueryRow(ctx, createUserScrapeMetadata, arg.UserID, arg.LastPlayedAt)
	var i UserScrapeMetadatum
	err := row.Scan(
		&i.UserID,
		&i.LastPlayedAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserScrapeMetadataByUserID = `-- name: GetUserScrapeMetadataByUserID :one
select
    user_id,
    last_played_at,
    updated_at,
    created_at
from user_scrape_metadata
where user_id = $1
`

func (q *Queries) GetUserScrapeMetadataByUserID(ctx context.Context, userID uuid.UUID) (UserScrapeMetadatum, error) {
	row := q.db.QueryRow(ctx, getUserScrapeMetadataByUserID, userID)
	var i UserScrapeMetadatum
	err := row.Scan(
		&i.UserID,
		&i.LastPlayedAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserScrapeMetadata = `-- name: UpdateUserScrapeMetadata :one
update user_scrape_metadata
set
    last_played_at = $2,
    updated_at = now()
where user_id = $1
returning user_id, last_played_at, updated_at, created_at
`

type UpdateUserScrapeMetadataParams struct {
	UserID       uuid.UUID
	LastPlayedAt pgtype.Timestamp
}

func (q *Queries) UpdateUserScrapeMetadata(ctx context.Context, arg UpdateUserScrapeMetadataParams) (UserScrapeMetadatum, error) {
	row := q.db.QueryRow(ctx, updateUserScrapeMetadata, arg.UserID, arg.LastPlayedAt)
	var i UserScrapeMetadatum
	err := row.Scan(
		&i.UserID,
		&i.LastPlayedAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
insert into users (
    user_id,
    username,
    password,
    sega_id,
    sega_password,
    game_name,
    tag_line,
    updated_at,
    created_at
)
values ($1, $2, $3, $4, $5, $6, $7, now(), now())
returning user_id, username, password, sega_id, sega_password, game_name, tag_line, updated_at, created_at
`

type CreateUserParams struct {
	UserID       uuid.UUID `json:"userID"`
	Username     string    `json:"username"`
	Password     string    `json:"password"`
	SegaID       string    `json:"segaID"`
	SegaPassword string    `json:"segaPassword"`
	GameName     string    `json:"gameName"`
	TagLine      string    `json:"tagLine"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserID,
		arg.Username,
		arg.Password,
		arg.SegaID,
		arg.SegaPassword,
		arg.GameName,
		arg.TagLine,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.SegaID,
		&i.SegaPassword,
		&i.GameName,
		&i.TagLine,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
select
    users.user_id,
    users.username,
    users.password,
    users.sega_id,
    users.sega_password,
    users.game_name,
    users.tag_line,
    users.updated_at,
    user_data.rating,
    user_data.season_play_count,
    user_data.total_play_count,
    user_metadata.last_played_at,
    user_metadata.last_scraped_at
from users
inner join (
    select distinct on (user_data.user_id)
        user_data.user_id,
        user_data.rating,
        user_data.season_play_count,
        user_data.total_play_count
    from user_data
    order by user_data.user_id asc, user_data.created_at desc
) as user_data on users.user_id = user_data.user_id
inner join user_metadata on users.user_id = user_metadata.user_id
`

type GetAllUsersRow struct {
	UserID          uuid.UUID        `json:"userID"`
	Username        string           `json:"username"`
	Password        string           `json:"password"`
	SegaID          string           `json:"segaID"`
	SegaPassword    string           `json:"segaPassword"`
	GameName        string           `json:"gameName"`
	TagLine         string           `json:"tagLine"`
	UpdatedAt       pgtype.Timestamp `json:"updatedAt"`
	Rating          int32            `json:"rating"`
	SeasonPlayCount int32            `json:"seasonPlayCount"`
	TotalPlayCount  int32            `json:"totalPlayCount"`
	LastPlayedAt    pgtype.Timestamp `json:"lastPlayedAt"`
	LastScrapedAt   pgtype.Timestamp `json:"lastScrapedAt"`
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Password,
			&i.SegaID,
			&i.SegaPassword,
			&i.GameName,
			&i.TagLine,
			&i.UpdatedAt,
			&i.Rating,
			&i.SeasonPlayCount,
			&i.TotalPlayCount,
			&i.LastPlayedAt,
			&i.LastScrapedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSegaCredentials = `-- name: GetSegaCredentials :one
select
    sega_id,
    sega_password
from users
where game_name = $1 and tag_line = $2
`

type GetSegaCredentialsParams struct {
	GameName string `json:"gameName"`
	TagLine  string `json:"tagLine"`
}

type GetSegaCredentialsRow struct {
	SegaID       string `json:"segaID"`
	SegaPassword string `json:"segaPassword"`
}

func (q *Queries) GetSegaCredentials(ctx context.Context, arg GetSegaCredentialsParams) (GetSegaCredentialsRow, error) {
	row := q.db.QueryRow(ctx, getSegaCredentials, arg.GameName, arg.TagLine)
	var i GetSegaCredentialsRow
	err := row.Scan(&i.SegaID, &i.SegaPassword)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select
    users.user_id,
    users.username,
    users.password,
    users.sega_id,
    users.sega_password,
    users.game_name,
    users.tag_line,
    users.updated_at,
    user_data.rating,
    user_data.season_play_count,
    user_data.total_play_count,
    user_metadata.last_played_at,
    user_metadata.last_scraped_at
from users
inner join (
    select distinct on (user_data.user_id)
        user_data.user_id,
        user_data.rating,
        user_data.season_play_count,
        user_data.total_play_count
    from user_data
    order by user_data.user_id asc, user_data.created_at desc
) as user_data on users.user_id = user_data.user_id
inner join user_metadata on users.user_id = user_metadata.user_id
where users.user_id = $1
`

type GetUserByIDRow struct {
	UserID          uuid.UUID        `json:"userID"`
	Username        string           `json:"username"`
	Password        string           `json:"password"`
	SegaID          string           `json:"segaID"`
	SegaPassword    string           `json:"segaPassword"`
	GameName        string           `json:"gameName"`
	TagLine         string           `json:"tagLine"`
	UpdatedAt       pgtype.Timestamp `json:"updatedAt"`
	Rating          int32            `json:"rating"`
	SeasonPlayCount int32            `json:"seasonPlayCount"`
	TotalPlayCount  int32            `json:"totalPlayCount"`
	LastPlayedAt    pgtype.Timestamp `json:"lastPlayedAt"`
	LastScrapedAt   pgtype.Timestamp `json:"lastScrapedAt"`
}

func (q *Queries) GetUserByID(ctx context.Context, userID uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, userID)
	var i GetUserByIDRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.SegaID,
		&i.SegaPassword,
		&i.GameName,
		&i.TagLine,
		&i.UpdatedAt,
		&i.Rating,
		&i.SeasonPlayCount,
		&i.TotalPlayCount,
		&i.LastPlayedAt,
		&i.LastScrapedAt,
	)
	return i, err
}

const getUserByMaiID = `-- name: GetUserByMaiID :one
select
    users.user_id,
    users.username,
    users.game_name,
    users.tag_line,
    users.updated_at,
    user_data.rating,
    user_data.season_play_count,
    user_data.total_play_count,
    user_metadata.last_played_at,
    user_metadata.last_scraped_at
from users
inner join (
    select distinct on (user_data.user_id)
        user_data.user_id,
        user_data.rating,
        user_data.season_play_count,
        user_data.total_play_count
    from user_data
    order by user_data.user_id asc, user_data.created_at desc
) as user_data on users.user_id = user_data.user_id
inner join user_metadata on users.user_id = user_metadata.user_id
where users.game_name = $1 and users.tag_line = $2
`

type GetUserByMaiIDParams struct {
	GameName string `json:"gameName"`
	TagLine  string `json:"tagLine"`
}

type GetUserByMaiIDRow struct {
	UserID          uuid.UUID        `json:"userID"`
	Username        string           `json:"username"`
	GameName        string           `json:"gameName"`
	TagLine         string           `json:"tagLine"`
	UpdatedAt       pgtype.Timestamp `json:"updatedAt"`
	Rating          int32            `json:"rating"`
	SeasonPlayCount int32            `json:"seasonPlayCount"`
	TotalPlayCount  int32            `json:"totalPlayCount"`
	LastPlayedAt    pgtype.Timestamp `json:"lastPlayedAt"`
	LastScrapedAt   pgtype.Timestamp `json:"lastScrapedAt"`
}

func (q *Queries) GetUserByMaiID(ctx context.Context, arg GetUserByMaiIDParams) (GetUserByMaiIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByMaiID, arg.GameName, arg.TagLine)
	var i GetUserByMaiIDRow
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.GameName,
		&i.TagLine,
		&i.UpdatedAt,
		&i.Rating,
		&i.SeasonPlayCount,
		&i.TotalPlayCount,
		&i.LastPlayedAt,
		&i.LastScrapedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
select
    username,
    password
from users
where username = $1
`

type GetUserByUsernameRow struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(&i.Username, &i.Password)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
update users
set
    username = $2,
    password = $3,
    sega_id = $4,
    sega_password = $5,
    game_name = $6,
    tag_line = $7,
    updated_at = now()
where user_id = $1
returning user_id, username, password, sega_id, sega_password, game_name, tag_line, updated_at, created_at
`

type UpdateUserParams struct {
	UserID       uuid.UUID `json:"userID"`
	Username     string    `json:"username"`
	Password     string    `json:"password"`
	SegaID       string    `json:"segaID"`
	SegaPassword string    `json:"segaPassword"`
	GameName     string    `json:"gameName"`
	TagLine      string    `json:"tagLine"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.UserID,
		arg.Username,
		arg.Password,
		arg.SegaID,
		arg.SegaPassword,
		arg.GameName,
		arg.TagLine,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.SegaID,
		&i.SegaPassword,
		&i.GameName,
		&i.TagLine,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
insert into users (
    id,
    user_id,
    display_name,
    password_hash,
    encrypted_sega_id,
    encrypted_sega_password,
    last_played_at,
    last_scraped_at
)
values (
    $1, $2, $3, $4, $5, $6, $7, $8
)
returning id, user_id, email, email_verified, display_name, password_hash, encrypted_sega_id, encrypted_sega_password, last_played_at, last_scraped_at, scrape_status, deleted_at, updated_at, created_at
`

type CreateUserParams struct {
	ID                    uuid.UUID        `json:"id"`
	UserID                string           `json:"userID"`
	DisplayName           string           `json:"displayName"`
	PasswordHash          string           `json:"passwordHash"`
	EncryptedSegaID       string           `json:"encryptedSegaID"`
	EncryptedSegaPassword string           `json:"encryptedSegaPassword"`
	LastPlayedAt          pgtype.Timestamp `json:"lastPlayedAt"`
	LastScrapedAt         pgtype.Timestamp `json:"lastScrapedAt"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.UserID,
		arg.DisplayName,
		arg.PasswordHash,
		arg.EncryptedSegaID,
		arg.EncryptedSegaPassword,
		arg.LastPlayedAt,
		arg.LastScrapedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.EmailVerified,
		&i.DisplayName,
		&i.PasswordHash,
		&i.EncryptedSegaID,
		&i.EncryptedSegaPassword,
		&i.LastPlayedAt,
		&i.LastScrapedAt,
		&i.ScrapeStatus,
		&i.DeletedAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
select
    id,
    user_id,
    display_name,
    encrypted_sega_id,
    encrypted_sega_password,
    last_played_at
from users
`

type GetAllUsersRow struct {
	ID                    uuid.UUID        `json:"id"`
	UserID                string           `json:"userID"`
	DisplayName           string           `json:"displayName"`
	EncryptedSegaID       string           `json:"encryptedSegaID"`
	EncryptedSegaPassword string           `json:"encryptedSegaPassword"`
	LastPlayedAt          pgtype.Timestamp `json:"lastPlayedAt"`
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.DisplayName,
			&i.EncryptedSegaID,
			&i.EncryptedSegaPassword,
			&i.LastPlayedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPasswordHashByUserID = `-- name: GetPasswordHashByUserID :one
select
    user_id,
    display_name,
    password_hash
from users
where user_id = $1
`

type GetPasswordHashByUserIDRow struct {
	UserID       string `json:"userID"`
	DisplayName  string `json:"displayName"`
	PasswordHash string `json:"passwordHash"`
}

func (q *Queries) GetPasswordHashByUserID(ctx context.Context, userID string) (GetPasswordHashByUserIDRow, error) {
	row := q.db.QueryRow(ctx, getPasswordHashByUserID, userID)
	var i GetPasswordHashByUserIDRow
	err := row.Scan(&i.UserID, &i.DisplayName, &i.PasswordHash)
	return i, err
}

const getSegaCredentialsByUserID = `-- name: GetSegaCredentialsByUserID :one
select
    encrypted_sega_id,
    encrypted_sega_password
from users
where user_id = $1
`

type GetSegaCredentialsByUserIDRow struct {
	EncryptedSegaID       string `json:"encryptedSegaID"`
	EncryptedSegaPassword string `json:"encryptedSegaPassword"`
}

func (q *Queries) GetSegaCredentialsByUserID(ctx context.Context, userID string) (GetSegaCredentialsByUserIDRow, error) {
	row := q.db.QueryRow(ctx, getSegaCredentialsByUserID, userID)
	var i GetSegaCredentialsByUserIDRow
	err := row.Scan(&i.EncryptedSegaID, &i.EncryptedSegaPassword)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select
    u.id,
    u.user_id,
    u.display_name,
    u.last_played_at,
    u.last_scraped_at,
    u.scrape_status,

    d.rating,
    d.season_play_count,
    d.total_play_count,

    m.bio,
    m.profile_image_url,
    m.location,
    m.twitter_id

from users u
left join (
    select distinct on (user_uuid) id, user_uuid, rating, season_play_count, total_play_count, created_at
    from user_data
    order by user_uuid, created_at desc
) as d on u.id = d.user_uuid
left join user_metadata m on u.id = m.user_uuid
where u.id = $1
`

type GetUserByIDRow struct {
	ID              uuid.UUID        `json:"id"`
	UserID          string           `json:"userID"`
	DisplayName     string           `json:"displayName"`
	LastPlayedAt    pgtype.Timestamp `json:"lastPlayedAt"`
	LastScrapedAt   pgtype.Timestamp `json:"lastScrapedAt"`
	ScrapeStatus    pgtype.Text      `json:"scrapeStatus"`
	Rating          int32            `json:"rating"`
	SeasonPlayCount int32            `json:"seasonPlayCount"`
	TotalPlayCount  int32            `json:"totalPlayCount"`
	Bio             pgtype.Text      `json:"bio"`
	ProfileImageUrl pgtype.Text      `json:"profileImageUrl"`
	Location        pgtype.Text      `json:"location"`
	TwitterID       pgtype.Text      `json:"twitterID"`
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DisplayName,
		&i.LastPlayedAt,
		&i.LastScrapedAt,
		&i.ScrapeStatus,
		&i.Rating,
		&i.SeasonPlayCount,
		&i.TotalPlayCount,
		&i.Bio,
		&i.ProfileImageUrl,
		&i.Location,
		&i.TwitterID,
	)
	return i, err
}

const getUserByUserID = `-- name: GetUserByUserID :one
select
    u.id,
    u.user_id,
    u.display_name,
    u.last_played_at,
    u.last_scraped_at,
    u.scrape_status,

    d.rating,
    d.season_play_count,
    d.total_play_count,

    m.bio,
    m.profile_image_url,
    m.location,
    m.twitter_id

from users u
left join (
    select distinct on (user_uuid) id, user_uuid, rating, season_play_count, total_play_count, created_at
    from user_data
    order by user_uuid, created_at desc
) as d on u.id = d.user_uuid
left join user_metadata m on u.id = m.user_uuid
where u.user_id = $1
`

type GetUserByUserIDRow struct {
	ID              uuid.UUID        `json:"id"`
	UserID          string           `json:"userID"`
	DisplayName     string           `json:"displayName"`
	LastPlayedAt    pgtype.Timestamp `json:"lastPlayedAt"`
	LastScrapedAt   pgtype.Timestamp `json:"lastScrapedAt"`
	ScrapeStatus    pgtype.Text      `json:"scrapeStatus"`
	Rating          int32            `json:"rating"`
	SeasonPlayCount int32            `json:"seasonPlayCount"`
	TotalPlayCount  int32            `json:"totalPlayCount"`
	Bio             pgtype.Text      `json:"bio"`
	ProfileImageUrl pgtype.Text      `json:"profileImageUrl"`
	Location        pgtype.Text      `json:"location"`
	TwitterID       pgtype.Text      `json:"twitterID"`
}

func (q *Queries) GetUserByUserID(ctx context.Context, userID string) (GetUserByUserIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByUserID, userID)
	var i GetUserByUserIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.DisplayName,
		&i.LastPlayedAt,
		&i.LastScrapedAt,
		&i.ScrapeStatus,
		&i.Rating,
		&i.SeasonPlayCount,
		&i.TotalPlayCount,
		&i.Bio,
		&i.ProfileImageUrl,
		&i.Location,
		&i.TwitterID,
	)
	return i, err
}

const updateLastPlayedAt = `-- name: UpdateLastPlayedAt :one
update users
set
    last_played_at = $2,
    updated_at = now()
where user_id = $1
returning user_id, last_played_at
`

type UpdateLastPlayedAtParams struct {
	UserID       string           `json:"userID"`
	LastPlayedAt pgtype.Timestamp `json:"lastPlayedAt"`
}

type UpdateLastPlayedAtRow struct {
	UserID       string           `json:"userID"`
	LastPlayedAt pgtype.Timestamp `json:"lastPlayedAt"`
}

func (q *Queries) UpdateLastPlayedAt(ctx context.Context, arg UpdateLastPlayedAtParams) (UpdateLastPlayedAtRow, error) {
	row := q.db.QueryRow(ctx, updateLastPlayedAt, arg.UserID, arg.LastPlayedAt)
	var i UpdateLastPlayedAtRow
	err := row.Scan(&i.UserID, &i.LastPlayedAt)
	return i, err
}

const updateLastScrapedAt = `-- name: UpdateLastScrapedAt :one
update users
set
    last_scraped_at = $2,
    updated_at = now()
where user_id = $1
returning user_id, last_scraped_at
`

type UpdateLastScrapedAtParams struct {
	UserID        string           `json:"userID"`
	LastScrapedAt pgtype.Timestamp `json:"lastScrapedAt"`
}

type UpdateLastScrapedAtRow struct {
	UserID        string           `json:"userID"`
	LastScrapedAt pgtype.Timestamp `json:"lastScrapedAt"`
}

func (q *Queries) UpdateLastScrapedAt(ctx context.Context, arg UpdateLastScrapedAtParams) (UpdateLastScrapedAtRow, error) {
	row := q.db.QueryRow(ctx, updateLastScrapedAt, arg.UserID, arg.LastScrapedAt)
	var i UpdateLastScrapedAtRow
	err := row.Scan(&i.UserID, &i.LastScrapedAt)
	return i, err
}

const updateUserByUUID = `-- name: UpdateUserByUUID :one
update users
set
    user_id = $2,
    display_name = $3,
    password_hash = $4,
    encrypted_sega_id = $5,
    encrypted_sega_password = $6,
    updated_at = now()
where id = $1
returning id, user_id, email, email_verified, display_name, password_hash, encrypted_sega_id, encrypted_sega_password, last_played_at, last_scraped_at, scrape_status, deleted_at, updated_at, created_at
`

type UpdateUserByUUIDParams struct {
	ID                    uuid.UUID `json:"id"`
	UserID                string    `json:"userID"`
	DisplayName           string    `json:"displayName"`
	PasswordHash          string    `json:"passwordHash"`
	EncryptedSegaID       string    `json:"encryptedSegaID"`
	EncryptedSegaPassword string    `json:"encryptedSegaPassword"`
}

func (q *Queries) UpdateUserByUUID(ctx context.Context, arg UpdateUserByUUIDParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserByUUID,
		arg.ID,
		arg.UserID,
		arg.DisplayName,
		arg.PasswordHash,
		arg.EncryptedSegaID,
		arg.EncryptedSegaPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.EmailVerified,
		&i.DisplayName,
		&i.PasswordHash,
		&i.EncryptedSegaID,
		&i.EncryptedSegaPassword,
		&i.LastPlayedAt,
		&i.LastScrapedAt,
		&i.ScrapeStatus,
		&i.DeletedAt,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_data.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const deleteUserDataByUserID = `-- name: DeleteUserDataByUserID :exec
delete from user_data
where user_id = $1
`

func (q *Queries) DeleteUserDataByUserID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserDataByUserID, userID)
	return err
}

const getUserDataByUserID = `-- name: GetUserDataByUserID :one
select
    id,
    user_id,
    game_name,
    tag_line,
    rating,
    season_play_count,
    total_play_count,
    created_at
from user_data
where user_id = $1
`

func (q *Queries) GetUserDataByUserID(ctx context.Context, userID uuid.UUID) (UserDatum, error) {
	row := q.db.QueryRow(ctx, getUserDataByUserID, userID)
	var i UserDatum
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GameName,
		&i.TagLine,
		&i.Rating,
		&i.SeasonPlayCount,
		&i.TotalPlayCount,
		&i.CreatedAt,
	)
	return i, err
}

const insertUserData = `-- name: InsertUserData :exec
insert into user_data (
    id,
    user_id,
    game_name,
    tag_line,
    rating,
    season_play_count,
    total_play_count,
    created_at
)
values ($1, $2, $3, $4, $5, $6, $7, now())
`

type InsertUserDataParams struct {
	ID              uuid.UUID
	UserID          uuid.UUID
	GameName        string
	TagLine         string
	Rating          int32
	SeasonPlayCount int32
	TotalPlayCount  int32
}

func (q *Queries) InsertUserData(ctx context.Context, arg InsertUserDataParams) error {
	_, err := q.db.Exec(ctx, insertUserData,
		arg.ID,
		arg.UserID,
		arg.GameName,
		arg.TagLine,
		arg.Rating,
		arg.SeasonPlayCount,
		arg.TotalPlayCount,
	)
	return err
}
